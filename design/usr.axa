//
// Copyright (c) 2016 Nous Xiong (348944179 at qq dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See https://github.com/nousxiong/actorx for latest version.
//
// actorx插件 ActorX Addon，简称axa;
// 

//
global cpp actor_id = actorx::adl::actor_id <actorx/actor/actor_id.adl.h>;
global java actor_id = actorx.adl.ActorId;
global cpp actor_exit = actorx::adl::actor_exit <actorx/actor/actor_exit.adl.h>;
global java actor_exit = actorx.adl.ActorExit;

//
local cpp socket = asio::ip::tcp::socket : <asio.hpp>;
local cpp error_code = std::error_code : <system_error>;

local java socket = java.nio.channels.AsynchronousSocketChannel;
local java InetSocketAddress = java.net.InetSocketAddress;
local java AbstractAioSession = actorx.net.AbstractAioSession;
local java ConnectOptions = actorx.net.ConnectOptions;
local java Throwable = java.lang.Throwable;
local java IOException = java.io.IOException;


// 自行处理异步回调的插件
async java aio_service
{
  void connect(InetSocketAddress isaddr) throws IOException 
    attaches(AbstractAioSession aas) 
    messages 
      OPEN(), 
      CONN_ERR(Throwable exc);

  void connect(ConnectOptions opt) throws IOException 
    attaches(AbstractAioSession aas) 
    messages 
      OPEN(), 
      CONN_ERR(Throwable exc);
}

// 自行处理异步回调的插件
async net_service
{
  java void connect(InetSocketAddress isaddr) throws IOException 
    attaches(AbstractAioSession aas) 
    messages 
      OPEN(), 
      CONN_ERR(Throwable exc);

  cpp void connect(string host, string port) noexcept 
    messages
      OPEN(socket skt), 
      CONN_ERR(error_code ec);
}

// 使用各自语言最优并行方式（cpp是fiber，java是thread）的插件
concur echo_service
  filters
    EXCEPT(string what)
{
  void echo(string e) 
    attaches(string note) 
    messages
      ECHO(string e), 
      ECHO_ERR(int32 errcode, string errmsg);
}
